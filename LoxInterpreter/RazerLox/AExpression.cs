/* This file is autogenerated by Generator.ps1.
*  Any changes made to it may be lost the next time it is run.
*/


namespace LoxInterpreter.RazerLox
{
    public abstract class AExpression
    {
        public abstract T Accept<T>(IVisitor<T> visitor);
    }
    public interface IVisitor<T>
    {
        T VisitBinaryExpression(BinaryExpression expression);

        T VisitGroupingExpression(GroupingExpression expression);

        T VisitLiteralExpression(LiteralExpression expression);

        T VisitUnaryExpression(UnaryExpression expression);

    }
    public sealed class BinaryExpression : AExpression
    {
        public readonly AExpression left;
        public readonly Token op;
        public readonly AExpression right;

        public BinaryExpression(AExpression left, Token op, AExpression right)
        {
            this.left = left;
            this.op = op;
            this.right = right;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitBinaryExpression(this);
        }
    }
    public sealed class GroupingExpression : AExpression
    {
        public readonly AExpression expression;

        public GroupingExpression(AExpression expression)
        {
            this.expression = expression;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitGroupingExpression(this);
        }
    }
    public sealed class LiteralExpression : AExpression
    {
        public readonly object value;

        public LiteralExpression(object value)
        {
            this.value = value;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitLiteralExpression(this);
        }
    }
    public sealed class UnaryExpression : AExpression
    {
        public readonly Token op;
        public readonly AExpression right;

        public UnaryExpression(Token op, AExpression right)
        {
            this.op = op;
            this.right = right;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitUnaryExpression(this);
        }
    }
}
