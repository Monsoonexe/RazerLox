#TODO - handle indenting

Param
(
	[String]
	$OutputDirectory = ""
)

Function DefineType
{
	Param 
	(
		[System.IO.StreamWriter]
		$writer, 

		[String]
		$baseName,

		[String]
		$className,

		[String]
		$fieldList
	)

	# declaration
	$writer.WriteLine("public sealed class $className : $baseName");
	$writer.WriteLine("{");

	# fields declarations
	foreach ($field in $fieldList.Split(","))
	{
		$f = $field.Trim()
		$writer.WriteLine("public readonly $f;");
	}

	$writer.WriteLine("");

	# constructor
	$writer.WriteLine("public $className($fieldList)");
	$writer.WriteLine("{");

	# assignment
	foreach ($field in $fieldList.Split(","))
	{
		$fieldName = $field.Trim().Split(" ")[1];
		$writer.WriteLine("this.$fieldName = $fieldName;");
	}

	$writer.WriteLine("}");

	$writer.WriteLine("}");
}

Function DefineFile
{
	Param
	(
		[String]
		$outDir,

		[String]
		$baseName,

		[String[]]
		$types
	)

	$outFile = "$outDir\$baseName.cs";

	$stream = [System.IO.File]::Open($outFile, [System.IO.FileMode]::Create, [System.IO.FileShare]::ReadWrite);
	$writer = New-Object System.IO.StreamWriter $stream;
	
	# programmer-facing header
	$writer.WriteLine("/* This file is autogenerated by Generator.ps1.");
	$writer.WriteLine("*  Any changes made to it may be lost the next time it is run.");
	$writer.WriteLine("*/`r`n`r`n")

	$writer.WriteLine("namespace LoxInterpreter.RazerLox");
	$writer.WriteLine("{");
	$writer.WriteLine("public abstract class $baseName");
	
	$writer.WriteLine("{`r`n`r`n}`r`n");

	# SUBCLASSES
	foreach ($type in $types)
	{
		$sub = $type.Split(":");
		$className = $sub[0].Trim();
		$fields = $sub[1].Trim();
		DefineType $writer $baseName $className $fields
	}

	# end namespace
	$writer.WriteLine("}");
	
	# clean up
	$writer.Close();
	$stream.Close();
}

$ErrorActionPreference = 'Stop'

if ([System.String]::IsNullOrEmpty($OutputDirectory))
{
	$OutputDirectory = Get-Location
}

$things = 
      "Binary   : AExpression left, Token op, AExpression right",
      "Grouping : AExpression expression",
      "Literal  : object value",
      "Unary    : Token op, AExpression right";

DefineFile $OutputDirectory "AExpression" $things